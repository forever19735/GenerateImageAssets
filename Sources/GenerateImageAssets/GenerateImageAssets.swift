import Foundation

// MARK: - Argument Parsing

struct CLIArguments {
    let assetsPath: String
    let outputPath: String

    init?(from args: [String]) {
        guard
            let assetsIndex = args.firstIndex(of: "--assets"),
            let outputIndex = args.firstIndex(of: "--output"),
            args.indices.contains(assetsIndex + 1),
            args.indices.contains(outputIndex + 1)
        else {
            return nil
        }
        self.assetsPath = args[assetsIndex + 1]
        self.outputPath = args[outputIndex + 1]
    }

    static func printUsage() {
        print("""
        ❌ 使用方式錯誤

        正確格式：
        generate-image-assets --assets <Assets.xcassets 路徑> --output <輸出檔案路徑>
        """)
    }
}

// MARK: - String Utilities

func convertToCamelCase(_ string: String) -> String {
    let components = string.split { $0 == "_" || $0 == "-" || $0 == " " }
    guard let first = components.first?.lowercased() else { return "" }
    let rest = components.dropFirst().map { $0.capitalized }
    return ([first] + rest).joined()
}

// MARK: - Main Logic

func collectImageAssets(from path: String) -> (flat: [String], grouped: [String: [String]]) {
    var flatImages: [String] = []
    var groupedImages: [String: [String]] = [:]

    let fileManager = FileManager.default
    guard let enumerator = fileManager.enumerator(atPath: path) else {
        fatalError("❌ 找不到 Assets.xcassets 資料夾: \(path)")
    }

    for case let file as String in enumerator {
        guard file.hasSuffix(".imageset") else { continue }
        let trimmedPath = String(file.dropLast(".imageset".count))  // e.g., Icons/home
        let components = trimmedPath.split(separator: "/").map(String.init)

        if components.count >= 2 {
            let group = convertToCamelCase(components[0])
            let name = components.last!
            groupedImages[group, default: []].append(name)
        } else if components.count == 1 {
            flatImages.append(components[0])
        }
    }

    return (flatImages, groupedImages)
}

func generateEnumContent(flatImages: [String], groupedImages: [String: [String]]) -> String {
    var sections: [String] = []

    // --- Base enum ---
    let flatCases = flatImages.sorted().map { image in
        let caseName = convertToCamelCase(image)
        return "    case \(caseName) = \"\(image)\""
    }.joined(separator: "\n")

    sections.append("""
    // Auto-generated by GenerateImageAssets.swift
    // DO NOT EDIT MANUALLY

    import UIKit

    enum ImageAsset: String {
    \(flatCases)
    }

    """)

    // --- Grouped enums ---
    for (group, images) in groupedImages.sorted(by: { $0.key < $1.key }) {
        let cases = images.sorted().map { image in
            let caseName = convertToCamelCase(image)
            return "        case \(caseName) = \"\(image)\""
        }.joined(separator: "\n")

        sections.append("""
        extension ImageAsset {
            enum \(group.capitalized): String {
        \(cases)
            }
        }

        """)
    }

    // --- UIImage extensions ---
    var imageExtensions: [String] = []

    imageExtensions.append("""
    extension UIImage {
        convenience init?(asset: ImageAsset) {
            self.init(named: asset.rawValue)
        }
    }
    """)

    for (group, _) in groupedImages.sorted(by: { $0.key < $1.key }) {
        imageExtensions.append("""
        extension UIImage {
            convenience init?(asset: ImageAsset.\(group.capitalized)) {
                self.init(named: asset.rawValue)
            }
        }
        """)
    }

    sections.append(imageExtensions.joined(separator: "\n\n"))

    return sections.joined(separator: "\n")
}

// MARK: - Main Entry

guard let cli = CLIArguments(from: CommandLine.arguments) else {
    CLIArguments.printUsage()
    exit(1)
}

let (flatImages, groupedImages) = collectImageAssets(from: cli.assetsPath)
let enumContent = generateEnumContent(flatImages: flatImages, groupedImages: groupedImages)

do {
    try enumContent.write(toFile: cli.outputPath, atomically: true, encoding: .utf8)
    print("✅ 成功產生 ImageAsset.swift → \(cli.outputPath)")
} catch {
    print("❌ 寫入失敗：\(error)")
}

import Foundation

// --- Parse CLI arguments ---
let args = CommandLine.arguments

guard let assetsArgIndex = args.firstIndex(of: "--assets"),
      let outputArgIndex = args.firstIndex(of: "--output"),
      args.indices.contains(assetsArgIndex + 1),
      args.indices.contains(outputArgIndex + 1) else {
    print("""
    ❌ 使用方式錯誤

    正確格式：
    generate-image-assets --assets <Assets.xcassets 路徑> --output <輸出檔案路徑>
    """)
    exit(1)
}

let assetsPath = args[assetsArgIndex + 1]
let outputPath = args[outputArgIndex + 1]

let fileManager = FileManager.default

guard let enumerator = fileManager.enumerator(atPath: assetsPath) else {
    fatalError("❌ 找不到 Assets.xcassets 資料夾")
}

var groupedImages: [String: [String]] = [:]
var flatImages: [String] = []

func snakeToCamel(_ string: String) -> String {
    let components = string.split(whereSeparator: { $0 == "_" || $0 == "-" || $0 == " " })
    let first = components.first?.lowercased() ?? ""
    let rest = components.dropFirst().map { $0.capitalized }
    return ([first] + rest).joined()
}

for case let file as String in enumerator {
    if file.hasSuffix(".imageset") {
        let pathWithoutExtension = String(file.dropLast(".imageset".count))  // e.g., Icons/home
        let components = pathWithoutExtension.split(separator: "/").map { String($0) }

        if components.count >= 2 {
            let group = snakeToCamel(components[0])
            let name = components.last!  // only keep the final image name for UIImage(named:)
            groupedImages[group, default: []].append(name)
        } else if components.count == 1 {
            flatImages.append(components[0])
        }
    }
}

var enumContent = """
// Auto-generated by GenerateImageAssets.swift
// DO NOT EDIT MANUALLY

import UIKit

enum ImageAsset: String {
"""

// Add flat (non-grouped) images
for image in flatImages.sorted() {
    let caseName = snakeToCamel(image)
    enumContent += "\n    case \(caseName) = \"\(image)\""
}

enumContent += "\n}\n\n"

// Add grouped enums
for (group, images) in groupedImages.sorted(by: { $0.key < $1.key }) {
    enumContent += "extension ImageAsset {\n"
    enumContent += "    enum \(group.capitalized): String {\n"

    for image in images.sorted() {
        let caseName = snakeToCamel(image)
        enumContent += "        case \(caseName) = \"\(image)\"\n"
    }

    enumContent += "    }\n"
    enumContent += "}\n\n"
}

// Add UIImage extension for flat ImageAsset
enumContent += """
extension UIImage {
    convenience init?(asset: ImageAsset) {
        self.init(named: asset.rawValue)
    }
}
\n
"""

// Add UIImage extension for each group
for (group, _) in groupedImages.sorted(by: { $0.key < $1.key }) {
    enumContent += """
extension UIImage {
    convenience init?(asset: ImageAsset.\(group.capitalized)) {
        self.init(named: asset.rawValue)
    }
}

"""
}

do {
    try enumContent.write(toFile: outputPath, atomically: true, encoding: .utf8)
    print("✅ 成功產生 ImageAsset.swift")
} catch {
    print("❌ 寫入失敗：\(error)")
}

